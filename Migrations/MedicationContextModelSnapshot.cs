// <auto-generated />
using System;
using MedicationList.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MedicationList.Migrations
{
    [DbContext(typeof(MedicationContext))]
    partial class MedicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("MedicationList.Models.DosageForm", b =>
                {
                    b.Property<int>("DosageFormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DosageFormId");

                    b.ToTable("DosageForms");

                    b.HasData(
                        new
                        {
                            DosageFormId = 1,
                            Name = "Capsule"
                        },
                        new
                        {
                            DosageFormId = 2,
                            Name = "MDI"
                        },
                        new
                        {
                            DosageFormId = 3,
                            Name = "Tablet"
                        },
                        new
                        {
                            DosageFormId = 4,
                            Name = "Vial"
                        });
                });

            modelBuilder.Entity("MedicationList.Models.DrugClass", b =>
                {
                    b.Property<int>("DrugClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DrugClassId");

                    b.ToTable("DrugClasses");

                    b.HasData(
                        new
                        {
                            DrugClassId = 1,
                            Name = "ACE Inhibitor"
                        },
                        new
                        {
                            DrugClassId = 2,
                            Name = "Beta Blocker"
                        },
                        new
                        {
                            DrugClassId = 3,
                            Name = "Inhaled Corticosteroid"
                        },
                        new
                        {
                            DrugClassId = 4,
                            Name = "NSAID"
                        },
                        new
                        {
                            DrugClassId = 5,
                            Name = "Statin"
                        });
                });

            modelBuilder.Entity("MedicationList.Models.Medication", b =>
                {
                    b.Property<int>("MedicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("DosageFormId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("DrugClassId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RouteId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("Strength")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("UomId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("MedicationId");

                    b.HasIndex("DosageFormId");

                    b.HasIndex("DrugClassId");

                    b.HasIndex("RouteId");

                    b.HasIndex("UomId");

                    b.ToTable("Medications");

                    b.HasData(
                        new
                        {
                            MedicationId = 1,
                            DosageFormId = 3,
                            DrugClassId = 1,
                            Name = "Lisinopril",
                            RouteId = 3,
                            Strength = 40,
                            UomId = 2
                        },
                        new
                        {
                            MedicationId = 2,
                            DosageFormId = 1,
                            DrugClassId = 1,
                            Name = "Ramipril",
                            RouteId = 3,
                            Strength = 5,
                            UomId = 2
                        },
                        new
                        {
                            MedicationId = 3,
                            DosageFormId = 2,
                            DrugClassId = 3,
                            Name = "Flovent",
                            RouteId = 1,
                            Strength = 110,
                            UomId = 1
                        },
                        new
                        {
                            MedicationId = 4,
                            DosageFormId = 3,
                            DrugClassId = 4,
                            Name = "Naproxen",
                            RouteId = 3,
                            Strength = 500,
                            UomId = 2
                        },
                        new
                        {
                            MedicationId = 5,
                            DosageFormId = 3,
                            DrugClassId = 5,
                            Name = "Atorvastatin",
                            RouteId = 3,
                            Strength = 40,
                            UomId = 2
                        },
                        new
                        {
                            MedicationId = 6,
                            DosageFormId = 3,
                            DrugClassId = 5,
                            Name = "Simvastatin",
                            RouteId = 3,
                            Strength = 40,
                            UomId = 2
                        },
                        new
                        {
                            MedicationId = 7,
                            DosageFormId = 3,
                            DrugClassId = 2,
                            Name = "Metoprolol XR",
                            RouteId = 3,
                            Strength = 25,
                            UomId = 2
                        },
                        new
                        {
                            MedicationId = 8,
                            DosageFormId = 3,
                            DrugClassId = 2,
                            Name = "Carvedilol",
                            RouteId = 3,
                            Strength = 25,
                            UomId = 2
                        },
                        new
                        {
                            MedicationId = 9,
                            DosageFormId = 3,
                            DrugClassId = 2,
                            Name = "Atenolol",
                            RouteId = 3,
                            Strength = 25,
                            UomId = 2
                        },
                        new
                        {
                            MedicationId = 10,
                            DosageFormId = 3,
                            DrugClassId = 4,
                            Name = "Meloxicam",
                            RouteId = 3,
                            Strength = 15,
                            UomId = 2
                        });
                });

            modelBuilder.Entity("MedicationList.Models.Route", b =>
                {
                    b.Property<int>("RouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RouteId");

                    b.ToTable("Routes");

                    b.HasData(
                        new
                        {
                            RouteId = 1,
                            Name = "Inhalation"
                        },
                        new
                        {
                            RouteId = 2,
                            Name = "Intramuscular"
                        },
                        new
                        {
                            RouteId = 3,
                            Name = "Oral"
                        },
                        new
                        {
                            RouteId = 4,
                            Name = "Subcutaneous"
                        });
                });

            modelBuilder.Entity("MedicationList.Models.Uom", b =>
                {
                    b.Property<int>("UomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UomId");

                    b.ToTable("Uoms");

                    b.HasData(
                        new
                        {
                            UomId = 1,
                            Name = "mcg"
                        },
                        new
                        {
                            UomId = 2,
                            Name = "mg"
                        },
                        new
                        {
                            UomId = 3,
                            Name = "mL"
                        },
                        new
                        {
                            UomId = 4,
                            Name = "units"
                        });
                });

            modelBuilder.Entity("MedicationList.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MedicationList.Models.Medication", b =>
                {
                    b.HasOne("MedicationList.Models.DosageForm", "DosageForm")
                        .WithMany()
                        .HasForeignKey("DosageFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicationList.Models.DrugClass", "DrugClass")
                        .WithMany()
                        .HasForeignKey("DrugClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicationList.Models.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicationList.Models.Uom", "Uom")
                        .WithMany()
                        .HasForeignKey("UomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DosageForm");

                    b.Navigation("DrugClass");

                    b.Navigation("Route");

                    b.Navigation("Uom");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MedicationList.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MedicationList.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicationList.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MedicationList.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
